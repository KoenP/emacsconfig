import * as shared from '@volar/shared';
import type * as ts from 'typescript/lib/tsserverlibrary';
import * as vscode from 'vscode-languageserver';
import { Project } from './project';
import type { createLsConfigs } from './configHost';
import { LanguageConfigs, RuntimeEnvironment } from './common';
import { createSnapshots } from './snapshots';
export interface Projects extends ReturnType<typeof createProjects> {
}
export declare function createProjects(runtimeEnv: RuntimeEnvironment, languageConfigs: LanguageConfigs, ts: typeof import('typescript/lib/tsserverlibrary'), tsLocalized: ts.MapLike<string> | undefined, options: shared.ServerInitializationOptions, documents: ReturnType<typeof createSnapshots>, connection: vscode.Connection, lsConfigs: ReturnType<typeof createLsConfigs> | undefined, getInferredCompilerOptions: () => Promise<ts.CompilerOptions>, capabilities: vscode.ClientCapabilities): {
    workspaces: Map<string, {
        projects: {
            clear: () => void;
            values: () => IterableIterator<Project>;
            uriDelete: (_uri: string) => boolean;
            uriGet: (_uri: string) => Project | undefined;
            uriHas: (_uri: string) => boolean;
            uriSet: (_uri: string, item: Project) => void;
            fsPathDelete: (_fsPath: string) => boolean;
            fsPathGet: (_fsPath: string) => Project | undefined;
            fsPathHas: (_fsPath: string) => boolean;
            fsPathSet: (_fsPath: string, item: Project) => void;
        };
        findMatchConfigs: (uri: string) => Promise<string | undefined>;
        getProjectAndTsConfig: (uri: string) => Promise<{
            tsconfig: string;
            project: {
                onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
                onDocumentUpdated: () => Promise<void>;
                getLanguageService: () => import("@volar/vue-language-service").LanguageService;
                getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
                getParsedCommandLine: () => import("@volar/vue-language-core").ParsedCommandLine;
                dispose: () => void;
            };
        } | undefined>;
        getProjectByCreate: (tsConfig: string) => Project;
        getInferredProject: () => Promise<{
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: () => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => import("@volar/vue-language-core").ParsedCommandLine;
            dispose: () => void;
        }>;
        getInferredProjectDontCreate: () => Project | undefined;
        clearFsCache: () => void;
    }>;
    getProject: (uri: string) => Promise<{
        tsconfig: string;
        project: {
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: () => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => import("@volar/vue-language-core").ParsedCommandLine;
            dispose: () => void;
        };
    } | {
        tsconfig: undefined;
        project: {
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: () => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => import("@volar/vue-language-core").ParsedCommandLine;
            dispose: () => void;
        } | undefined;
    } | undefined>;
    reloadProject: (uri: string) => Promise<void>;
    addRoot: (rootPath: string) => void;
    removeRoot: (rootPath: string) => void;
};
